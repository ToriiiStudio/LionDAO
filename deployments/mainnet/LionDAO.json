{
  "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAGE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveawayLion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasWhitelistSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintWhitelistLion",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numGiveaway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWhitelistSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_num",
          "type": "uint256"
        }
      ],
      "name": "setMAX_LION",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_STAGE_LIMIT",
          "type": "uint256"
        }
      ],
      "name": "setSTAGE_LIMIT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasWhitelistSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistSaleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set_PRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSaleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
  "receipt": {
    "to": null,
    "from": "0x1dFB59C742E74FBA03d661BC1CE0fA9264752F33",
    "contractAddress": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
    "transactionIndex": 197,
    "gasUsed": "2963456",
    "logsBloom": "0x26200090300010000049005400a4a020000082002012000002800000002000022082000140004a022a00200204a1040400213000060481a020200116122c0080041039000020008880890008020004031843004000048211804082041002001029000a4802084020000000018080083c600041086000060010000010044008400080020c405108000100000000080412180019a0000e4000000002c402020080002401000902000020008382030400600010010842a0806080201008040740004030100280000090440000000000010408642000a24044082400012a401c603ab000522280500008080002100020000008002000108004048319248002882400",
    "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526",
    "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
    "logs": [
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001dfb59c742e74fba03d661bc1ce0fa9264752f33"
        ],
        "data": "0x",
        "logIndex": 464,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 465,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 466,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 467,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 468,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 469,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 470,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 471,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 472,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 473,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 474,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 475,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 476,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 477,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 478,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 479,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 480,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 481,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 482,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 483,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 484,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 485,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 486,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 487,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 488,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 489,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 490,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 491,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 492,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 493,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 494,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 495,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 496,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 497,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000021"
        ],
        "data": "0x",
        "logIndex": 498,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000022"
        ],
        "data": "0x",
        "logIndex": 499,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000023"
        ],
        "data": "0x",
        "logIndex": 500,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000024"
        ],
        "data": "0x",
        "logIndex": 501,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000025"
        ],
        "data": "0x",
        "logIndex": 502,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000026"
        ],
        "data": "0x",
        "logIndex": 503,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000027"
        ],
        "data": "0x",
        "logIndex": 504,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000028"
        ],
        "data": "0x",
        "logIndex": 505,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000029"
        ],
        "data": "0x",
        "logIndex": 506,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 507,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000002b"
        ],
        "data": "0x",
        "logIndex": 508,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000002c"
        ],
        "data": "0x",
        "logIndex": 509,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000002d"
        ],
        "data": "0x",
        "logIndex": 510,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000002e"
        ],
        "data": "0x",
        "logIndex": 511,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000002f"
        ],
        "data": "0x",
        "logIndex": 512,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000030"
        ],
        "data": "0x",
        "logIndex": 513,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000031"
        ],
        "data": "0x",
        "logIndex": 514,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000032"
        ],
        "data": "0x",
        "logIndex": 515,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000033"
        ],
        "data": "0x",
        "logIndex": 516,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000034"
        ],
        "data": "0x",
        "logIndex": 517,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000035"
        ],
        "data": "0x",
        "logIndex": 518,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000036"
        ],
        "data": "0x",
        "logIndex": 519,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000037"
        ],
        "data": "0x",
        "logIndex": 520,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000038"
        ],
        "data": "0x",
        "logIndex": 521,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000039"
        ],
        "data": "0x",
        "logIndex": 522,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000003a"
        ],
        "data": "0x",
        "logIndex": 523,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000003b"
        ],
        "data": "0x",
        "logIndex": 524,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000003c"
        ],
        "data": "0x",
        "logIndex": 525,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000003d"
        ],
        "data": "0x",
        "logIndex": 526,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000003e"
        ],
        "data": "0x",
        "logIndex": 527,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000003f"
        ],
        "data": "0x",
        "logIndex": 528,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000040"
        ],
        "data": "0x",
        "logIndex": 529,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000041"
        ],
        "data": "0x",
        "logIndex": 530,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000042"
        ],
        "data": "0x",
        "logIndex": 531,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000043"
        ],
        "data": "0x",
        "logIndex": 532,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000044"
        ],
        "data": "0x",
        "logIndex": 533,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000045"
        ],
        "data": "0x",
        "logIndex": 534,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000046"
        ],
        "data": "0x",
        "logIndex": 535,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000047"
        ],
        "data": "0x",
        "logIndex": 536,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000048"
        ],
        "data": "0x",
        "logIndex": 537,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000049"
        ],
        "data": "0x",
        "logIndex": 538,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000004a"
        ],
        "data": "0x",
        "logIndex": 539,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000004b"
        ],
        "data": "0x",
        "logIndex": 540,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000004c"
        ],
        "data": "0x",
        "logIndex": 541,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000004d"
        ],
        "data": "0x",
        "logIndex": 542,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000004e"
        ],
        "data": "0x",
        "logIndex": 543,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000004f"
        ],
        "data": "0x",
        "logIndex": 544,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000050"
        ],
        "data": "0x",
        "logIndex": 545,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000051"
        ],
        "data": "0x",
        "logIndex": 546,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000052"
        ],
        "data": "0x",
        "logIndex": 547,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000053"
        ],
        "data": "0x",
        "logIndex": 548,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000054"
        ],
        "data": "0x",
        "logIndex": 549,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000055"
        ],
        "data": "0x",
        "logIndex": 550,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000056"
        ],
        "data": "0x",
        "logIndex": 551,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000057"
        ],
        "data": "0x",
        "logIndex": 552,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000058"
        ],
        "data": "0x",
        "logIndex": 553,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000059"
        ],
        "data": "0x",
        "logIndex": 554,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000005a"
        ],
        "data": "0x",
        "logIndex": 555,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000005b"
        ],
        "data": "0x",
        "logIndex": 556,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000005c"
        ],
        "data": "0x",
        "logIndex": 557,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000005d"
        ],
        "data": "0x",
        "logIndex": 558,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000005e"
        ],
        "data": "0x",
        "logIndex": 559,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x000000000000000000000000000000000000000000000000000000000000005f"
        ],
        "data": "0x",
        "logIndex": 560,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000060"
        ],
        "data": "0x",
        "logIndex": 561,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000061"
        ],
        "data": "0x",
        "logIndex": 562,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000062"
        ],
        "data": "0x",
        "logIndex": 563,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000063"
        ],
        "data": "0x",
        "logIndex": 564,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      },
      {
        "transactionIndex": 197,
        "blockNumber": 14408715,
        "transactionHash": "0x210c1793a2a9416b7f2fce92e9bd6b54d73788c1b41212279046a05ae804b7a0",
        "address": "0xD356DE76AC911C226C8A3196E1b1E716045582B2",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000021091a257294aab05b05ff1b3b686b2ba10546e7",
          "0x0000000000000000000000000000000000000000000000000000000000000064"
        ],
        "data": "0x",
        "logIndex": 565,
        "blockHash": "0x387ad1e851e5b06ea270e8e07e6e750fa694a089bf87b5accec25d6dcd4c0526"
      }
    ],
    "blockNumber": 14408715,
    "cumulativeGasUsed": "24574555",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b6836cf8466ea374fca925853f57121a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveawayLion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasWhitelistSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintWhitelistLion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numGiveaway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWhitelistSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_num\",\"type\":\"uint256\"}],\"name\":\"setMAX_LION\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_STAGE_LIMIT\",\"type\":\"uint256\"}],\"name\":\"setSTAGE_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasWhitelistSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistSaleTimestamp\",\"type\":\"uint256\"}],\"name\":\"setWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LionDAO.sol\":\"LionDAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at 0 (e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**128 - 1 (max value of uint128).\\n */\\ncontract ERC721A is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n    }\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n    }\\n\\n    // Compiler will pack the following \\n    // _currentIndex and _burnCounter into a single 256bit word.\\n    \\n    // The tokenId of the next token to be minted.\\n    uint128 internal _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint128 internal _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) internal _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) private _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return _currentIndex - _burnCounter;    \\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenByIndex(uint256 index) public view override returns (uint256) {\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (!ownership.burned) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n        revert TokenIndexOutOfBounds();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     * This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first.\\n     * It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\\n        if (index >= balanceOf(owner)) revert OwnerIndexOutOfBounds();\\n        uint256 numMintedSoFar = _currentIndex;\\n        uint256 tokenIdsIdx;\\n        address currOwnershipAddr;\\n\\n        // Counter overflow is impossible as the loop breaks when\\n        // uint256 i is equal to another uint256 numMintedSoFar.\\n        unchecked {\\n            for (uint256 i; i < numMintedSoFar; i++) {\\n                TokenOwnership memory ownership = _ownerships[i];\\n                if (ownership.burned) {\\n                    continue;\\n                }\\n                if (ownership.addr != address(0)) {\\n                    currOwnershipAddr = ownership.addr;\\n                }\\n                if (currOwnershipAddr == owner) {\\n                    if (tokenIdsIdx == index) {\\n                        return i;\\n                    }\\n                    tokenIdsIdx++;\\n                }\\n            }\\n        }\\n\\n        // Execution should never reach this point.\\n        revert();\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(_addressData[owner].balance);\\n    }\\n\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberMinted);\\n    }\\n\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(_addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (curr < _currentIndex) {\\n                TokenOwnership memory ownership = _ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant: \\n                    // There will always be an ownership that has an address and is not burned \\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = _ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return ownershipOf(tokenId).addr;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ERC721A.ownerOf(tokenId);\\n        if (to == owner) revert ApprovalToCurrentOwner();\\n\\n        if (_msgSender() != owner && !isApprovedForAll(owner, _msgSender())) {\\n            revert ApprovalCallerNotOwnerNorApproved();\\n        }\\n\\n        _approve(to, tokenId, owner);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public override {\\n        if (operator == _msgSender()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        _transfer(from, to, tokenId);\\n        if (!_checkOnERC721Received(from, to, tokenId, _data)) {\\n            revert TransferToNonERC721ReceiverImplementer();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenId < _currentIndex && !_ownerships[tokenId].burned;\\n    }\\n\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity, _data, true);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 3.4e38 (2**128) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 3.4e38 (2**128) - 1\\n        unchecked {\\n            _addressData[to].balance += uint64(quantity);\\n            _addressData[to].numberMinted += uint64(quantity);\\n\\n            _ownerships[startTokenId].addr = to;\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            _currentIndex = uint128(updatedIndex);\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) private {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        bool isApprovedOrOwner = (_msgSender() == prevOwnership.addr ||\\n            isApprovedForAll(prevOwnership.addr, _msgSender()) ||\\n            getApproved(tokenId) == _msgSender());\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[from].balance -= 1;\\n            _addressData[to].balance += 1;\\n\\n            _ownerships[tokenId].addr = to;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        TokenOwnership memory prevOwnership = ownershipOf(tokenId);\\n\\n        _beforeTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**128.\\n        unchecked {\\n            _addressData[prevOwnership.addr].balance -= 1;\\n            _addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            _ownerships[tokenId].addr = prevOwnership.addr;\\n            _ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            _ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (_ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < _currentIndex) {\\n                    _ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    _ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked { \\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xfae1341d343abce757109fbff0e9fa7d90de54eecb7fe1d983e0d206e0c62ece\",\"license\":\"MIT\"},\"contracts/LionDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './ERC721A.sol';\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n//  _     ___   ___   _  _   ___     _     ___\\n// | |   |_ _| / _ \\\\ | \\\\| | |   \\\\   /_\\\\   / _ \\\\\\n// | |__  | | | (_) || .` | | |) | / _ \\\\ | (_) |\\n// |____||___| \\\\___/ |_|\\\\_| |___/ /_/ \\\\_\\\\ \\\\___/\\n\\n\\ncontract LionDAO is Ownable, EIP712, ERC721A {\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Sales variables\\n\\t// ------------------------------------------------------------------------\\n\\tuint256 public MAX_LION = 10000;\\n\\tuint256 public STAGE_LIMIT = 434;\\n\\tuint256 public PRICE = 0.8 ether;\\n\\tuint256 public numWhitelistSale = 0;\\n\\tuint256 public numGiveaway = 0;\\n\\tuint256 public whitelistSaleTimestamp = 1647198840; \\n\\tbool public hasWhitelistSaleStarted = true;\\n\\tstring private _baseTokenURI = \\\"http://api.liondaonft.com/Metadata/\\\";\\n\\taddress public treasury = 0x21091A257294aAb05B05ff1B3B686B2Ba10546E7;\\n\\n\\tmapping (address => uint256) public hasMinted;\\n\\n\\t// Events\\n\\t// ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 quantity, uint256 totalSupply);\\n\\t\\n\\t// Constructor\\n\\t// ------------------------------------------------------------------------\\n\\tconstructor()\\n\\tEIP712(\\\"LIONDAO\\\", \\\"1.0.0\\\")\\n\\tERC721A(\\\"LION DAO\\\", \\\"LION\\\"){\\n\\t\\t_safeMint(treasury, 101);\\n\\t}  \\n\\n    // Modifiers\\n    // ------------------------------------------------------------------------\\n    modifier onlyWhitelistSale() {\\n\\t\\trequire(hasWhitelistSaleStarted == true, \\\"WHITELIST_NOT_ACTIVE\\\");\\n        require(block.timestamp >= whitelistSaleTimestamp, \\\"NOT_IN_WHITELIST_TIME\\\");\\n        _;\\n    }\\n\\n\\t// Verify functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n\\t\\taddress recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"), _msgSender(), maxQuantity))), SIGNATURE);\\n\\n\\t\\treturn owner() == recoveredAddr;\\n\\t}\\n\\n\\t// Whitelist functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction mintWhitelistLion(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlyWhitelistSale{\\n\\t\\trequire(totalSupply().add(quantity) <= STAGE_LIMIT, \\\"This stage is sold out!\\\");\\n\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for whitelist.\\\");\\n\\t\\trequire(quantity > 0 && hasMinted[msg.sender].add(quantity) <= maxQuantity, \\\"Exceeds max whitelist number.\\\");\\n\\t\\trequire(totalSupply().add(quantity) <= MAX_LION, \\\"Exceeds MAX_LION.\\\");\\n\\t\\trequire(msg.value == PRICE.mul(quantity), \\\"Ether value sent is not equal the price.\\\");\\n\\n\\t\\t_safeMint(msg.sender, quantity);\\n\\n\\t\\tnumWhitelistSale = numWhitelistSale.add(quantity);\\n\\t\\thasMinted[msg.sender] = hasMinted[msg.sender].add(quantity);\\n\\n\\t\\temit mintEvent(msg.sender, quantity, totalSupply());\\n\\t}\\n\\n\\t// Giveaway functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction giveawayLion(address _to, uint256 quantity) external onlyOwner{\\n\\t\\trequire(totalSupply().add(quantity) <= MAX_LION, \\\"Exceeds MAX_LION.\\\");\\n\\n\\t\\t_safeMint(_to, quantity);\\n\\n\\t\\tnumGiveaway = numGiveaway.add(quantity);\\n\\t\\temit mintEvent(_to, quantity, totalSupply());\\n\\t}\\n\\n\\t// Base URI Functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\n\\t\\trequire(_exists(tokenId), \\\"TOKEN_NOT_EXISTS\\\");\\n\\t\\t\\n\\t\\treturn string(abi.encodePacked(_baseTokenURI, tokenId.toString()));\\n\\t}\\n\\n    // Burn Functions\\n    // ------------------------------------------------------------------------\\n    function burn(uint256 tokenId) external onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n\\t// setting functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction setURI(string calldata _tokenURI) external onlyOwner {\\n\\t\\t_baseTokenURI = _tokenURI;\\n\\t}\\n\\n\\tfunction setSTAGE_LIMIT(uint _STAGE_LIMIT) external onlyOwner {\\n\\t\\tSTAGE_LIMIT = _STAGE_LIMIT;\\n\\t}\\n\\n\\tfunction setMAX_LION(uint _MAX_num) external onlyOwner {\\n\\t\\tMAX_LION = _MAX_num;\\n\\t}\\n\\n\\tfunction set_PRICE(uint _price) external onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n    function setWhitelistSale(bool _hasWhitelistSaleStarted,uint256 _whitelistSaleTimestamp) external onlyOwner {\\n        hasWhitelistSaleStarted = _hasWhitelistSaleStarted;\\n        whitelistSaleTimestamp = _whitelistSaleTimestamp;\\n    }\\n\\n\\t// Withdrawal functions\\n\\t// ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(treasury != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        treasury = _treasury;\\n    }\\n\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(treasury).send(address(this).balance));\\n\\t}\\n}\\n  \",\"keccak256\":\"0x57eef5d138157edf1159dd1a95101f40ed3c2d2ffb8fecadbb705adf343e2ad6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6127106008556101b2600955670b1a2bc2ec500000600a556000600b819055600c5563622e4278600d55600e805460ff19166001179055610180604052602361012081815290620030f26101403980516200006391600f9160209091019062000554565b50601080546001600160a01b0319167321091a257294aab05b05ff1b3b686b2ba10546e71790553480156200009757600080fd5b50604051806040016040528060088152602001674c494f4e2044414f60c01b815250604051806040016040528060048152602001632624a7a760e11b815250604051806040016040528060078152602001664c494f4e44414f60c81b815250604051806040016040528060058152602001640312e302e360dc1b8152506200012e620001286200020060201b60201c565b62000204565b815160209283012081519183019190912060c082815260e08290524660a0818152604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f818901819052818301979097526060810195909552608080860193909352308583015280518086039092018252939092019092528051908401209052610100528251620001c8916002919085019062000554565b508051620001de90600390602084019062000554565b5050601054620001fa91506001600160a01b0316606562000254565b620006e1565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620002768282604051806020016040528060008152506200027a60201b60201c565b5050565b6200028983838360016200028e565b505050565b6001546001600160801b03166001600160a01b038516620002c157604051622e076360e81b815260040160405180910390fd5b83620002e05760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c018116918217680100000000000000006001600160401b031990941690921783900481168c018116909202179091558584526004909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b85811015620003f75760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4838015620003cb5750620003c960008884886200041f565b155b15620003ea576040516368d2bf6b60e11b815260040160405180910390fd5b6001918201910162000370565b50600180546001600160801b0319166001600160801b03929092169190911790555050505050565b600062000440846001600160a01b03166200054e60201b620014301760201c565b156200054257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200047a9033908990889088906004016200062b565b602060405180830381600087803b1580156200049557600080fd5b505af1925050508015620004c8575060408051601f3d908101601f19168201909252620004c591810190620005fa565b60015b62000527573d808015620004f9576040519150601f19603f3d011682016040523d82523d6000602084013e620004fe565b606091505b5080516200051f576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062000546565b5060015b949350505050565b3b151590565b8280546200056290620006a4565b90600052602060002090601f016020900481019282620005865760008555620005d1565b82601f10620005a157805160ff1916838001178555620005d1565b82800160010185558215620005d1579182015b82811115620005d1578251825591602001919060010190620005b4565b50620005df929150620005e3565b5090565b5b80821115620005df5760008155600101620005e4565b6000602082840312156200060c578081fd5b81516001600160e01b03198116811462000624578182fd5b9392505050565b600060018060a01b0380871683526020818716818501528560408501526080606085015284519150816080850152825b82811015620006795785810182015185820160a0015281016200065b565b828111156200068b578360a084870101525b5050601f01601f19169190910160a00195945050505050565b600181811c90821680620006b957607f821691505b60208210811415620006db57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e051610100516129cc620007266000396000611d3001526000611d7f01526000611d5a01526000611cde01526000611d0701526129cc6000f3fe6080604052600436106102305760003560e01c80636352211e1161012e57806395d89b41116100ab578063e7908b091161006f578063e7908b0914610644578063e985e9c514610657578063f0f44260146106a0578063f2fde38b146106c0578063fc89bacd146106e057600080fd5b806395d89b41146105b9578063a22cb465146105ce578063b88d4fde146105ee578063c341526b1461060e578063c87b56dd1461062457600080fd5b8063853828b6116100f2578063853828b61461054757806385852ce41461054f5780638b795dcb1461056f5780638d859f3e146105855780638da5cb5b1461059b57600080fd5b80636352211e146104b25780636456c205146104d257806370a08231146104f2578063715018a614610512578063798611a01461052757600080fd5b806323b872dd116101bc57806342966c681161018057806342966c68146104265780634f6ccce71461044657806352e96828146104665780635b769c6d1461047c57806361d027b31461049257600080fd5b806323b872dd1461037f5780632f745c591461039f57806332a61f5f146103bf57806338e21cce146103d957806342842e0e1461040657600080fd5b8063081812fc11610203578063081812fc146102ce578063095ea7b3146103065780630a61454b1461032657806318160ddd1461034a57806318e77a8e1461035f57600080fd5b806301ffc9a71461023557806302244fd01461026a57806302fe53051461028c57806306fdde03146102ac575b600080fd5b34801561024157600080fd5b50610255610250366004612586565b610700565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028a61028536600461262a565b61076d565b005b34801561029857600080fd5b5061028a6102a73660046125be565b6107a5565b3480156102b857600080fd5b506102c16107e0565b60405161026191906127fe565b3480156102da57600080fd5b506102ee6102e936600461262a565b610872565b6040516001600160a01b039091168152602001610261565b34801561031257600080fd5b5061028a610321366004612542565b6108b6565b34801561033257600080fd5b5061033c60095481565b604051908152602001610261565b34801561035657600080fd5b5061033c61093f565b34801561036b57600080fd5b5061028a61037a366004612542565b61095e565b34801561038b57600080fd5b5061028a61039a366004612479565b610a50565b3480156103ab57600080fd5b5061033c6103ba366004612542565b610a5b565b3480156103cb57600080fd5b50600e546102559060ff1681565b3480156103e557600080fd5b5061033c6103f436600461242d565b60116020526000908152604090205481565b34801561041257600080fd5b5061028a610421366004612479565b610b57565b34801561043257600080fd5b5061028a61044136600461262a565b610b72565b34801561045257600080fd5b5061033c61046136600461262a565b610ba8565b34801561047257600080fd5b5061033c600d5481565b34801561048857600080fd5b5061033c60085481565b34801561049e57600080fd5b506010546102ee906001600160a01b031681565b3480156104be57600080fd5b506102ee6104cd36600461262a565b610c54565b3480156104de57600080fd5b5061028a6104ed36600461262a565b610c66565b3480156104fe57600080fd5b5061033c61050d36600461242d565b610c95565b34801561051e57600080fd5b5061028a610ce3565b34801561053357600080fd5b5061028a61054236600461262a565b610d19565b61028a610d48565b34801561055b57600080fd5b5061025561056a366004612642565b610da3565b34801561057b57600080fd5b5061033c600b5481565b34801561059157600080fd5b5061033c600a5481565b3480156105a757600080fd5b506000546001600160a01b03166102ee565b3480156105c557600080fd5b506102c1610e44565b3480156105da57600080fd5b5061028a6105e9366004612519565b610e53565b3480156105fa57600080fd5b5061028a6106093660046124b4565b610ee9565b34801561061a57600080fd5b5061033c600c5481565b34801561063057600080fd5b506102c161063f36600461262a565b610f23565b61028a610652366004612686565b610f9f565b34801561066357600080fd5b50610255610672366004612447565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156106ac57600080fd5b5061028a6106bb36600461242d565b6112bc565b3480156106cc57600080fd5b5061028a6106db36600461242d565b611357565b3480156106ec57600080fd5b5061028a6106fb36600461256b565b6113ef565b60006001600160e01b031982166380ac58cd60e01b148061073157506001600160e01b03198216635b5e139f60e01b145b8061074c57506001600160e01b0319821663780e9d6360e01b145b8061076757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146107a05760405162461bcd60e51b815260040161079790612811565b60405180910390fd5b600855565b6000546001600160a01b031633146107cf5760405162461bcd60e51b815260040161079790612811565b6107db600f83836122e2565b505050565b6060600280546107ef906128d4565b80601f016020809104026020016040519081016040528092919081815260200182805461081b906128d4565b80156108685780601f1061083d57610100808354040283529160200191610868565b820191906000526020600020905b81548152906001019060200180831161084b57829003601f168201915b5050505050905090565b600061087d82611436565b61089a576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108c182610c54565b9050806001600160a01b0316836001600160a01b031614156108f65760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161480159061091657506109148133610672565b155b15610934576040516367d9dca160e11b815260040160405180910390fd5b6107db83838361146c565b6001546001600160801b03600160801b82048116918116919091031690565b6000546001600160a01b031633146109885760405162461bcd60e51b815260040161079790612811565b60085461099d8261099761093f565b906114c8565b11156109df5760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399026a0ac2fa624a7a71760791b6044820152606401610797565b6109e982826114db565b600c546109f690826114c8565b600c557f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282610a2461093f565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a15050565b6107db8383836114f9565b6000610a6683610c95565b8210610a85576040516306ed618760e11b815260040160405180910390fd5b6001546001600160801b0316600080805b83811015610b5157600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161580159282019290925290610afd5750610b49565b80516001600160a01b031615610b1257805192505b876001600160a01b0316836001600160a01b03161415610b475786841415610b405750935061076792505050565b6001909301925b505b600101610a96565b50600080fd5b6107db83838360405180602001604052806000815250610ee9565b6000546001600160a01b03163314610b9c5760405162461bcd60e51b815260040161079790612811565b610ba581611716565b50565b6001546000906001600160801b031681805b82811015610c3a57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290610c315785831415610c2a5750949350505050565b6001909201915b50600101610bba565b506040516329c8c00760e21b815260040160405180910390fd5b6000610c5f826118b3565b5192915050565b6000546001600160a01b03163314610c905760405162461bcd60e51b815260040161079790612811565b600a55565b60006001600160a01b038216610cbe576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6000546001600160a01b03163314610d0d5760405162461bcd60e51b815260040161079790612811565b610d1760006119d7565b565b6000546001600160a01b03163314610d435760405162461bcd60e51b815260040161079790612811565b600955565b6000546001600160a01b03163314610d725760405162461bcd60e51b815260040161079790612811565b6010546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050610d1757600080fd5b600080610e14610e0e7f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b03909116908201526060810187905260800160405160208183030381529060405280519060200120611a27565b84611a75565b9050806001600160a01b0316610e326000546001600160a01b031690565b6001600160a01b031614949350505050565b6060600380546107ef906128d4565b6001600160a01b038216331415610e7d5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ef48484846114f9565b610f0084848484611a99565b610f1d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610f2e82611436565b610f6d5760405162461bcd60e51b815260206004820152601060248201526f544f4b454e5f4e4f545f45584953545360801b6044820152606401610797565b600f610f7883611ba8565b604051602001610f8992919061271b565b6040516020818303038152906040529050919050565b600e5460ff161515600114610fed5760405162461bcd60e51b815260206004820152601460248201527357484954454c4953545f4e4f545f41435449564560601b6044820152606401610797565b600d544210156110375760405162461bcd60e51b81526020600482015260156024820152744e4f545f494e5f57484954454c4953545f54494d4560581b6044820152606401610797565b6009546110468461099761093f565b11156110945760405162461bcd60e51b815260206004820152601760248201527f5468697320737461676520697320736f6c64206f7574210000000000000000006044820152606401610797565b61109e8282610da3565b6110ea5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656c696769626c6520666f722077686974656c6973742e00000000006044820152606401610797565b600083118015611114575033600090815260116020526040902054829061111190856114c8565b11155b6111605760405162461bcd60e51b815260206004820152601d60248201527f45786365656473206d61782077686974656c697374206e756d6265722e0000006044820152606401610797565b60085461116f8461099761093f565b11156111b15760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399026a0ac2fa624a7a71760791b6044820152606401610797565b600a546111be9084611cc1565b341461121d5760405162461bcd60e51b815260206004820152602860248201527f45746865722076616c75652073656e74206973206e6f7420657175616c2074686044820152673290383934b1b29760c11b6064820152608401610797565b61122733846114db565b600b5461123490846114c8565b600b553360009081526011602052604090205461125190846114c8565b336000818152601160205260409020919091557f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560908461128f61093f565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1505050565b6000546001600160a01b031633146112e65760405162461bcd60e51b815260040161079790612811565b6010546001600160a01b03166113355760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b6044820152606401610797565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146113815760405162461bcd60e51b815260040161079790612811565b6001600160a01b0381166113e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610797565b610ba5816119d7565b6000546001600160a01b031633146114195760405162461bcd60e51b815260040161079790612811565b600e805460ff191692151592909217909155600d55565b3b151590565b6001546000906001600160801b031682108015610767575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006114d48284612846565b9392505050565b6114f5828260405180602001604052806000815250611ccd565b5050565b6000611504826118b3565b80519091506000906001600160a01b0316336001600160a01b03161480611532575081516115329033610672565b8061154d57503361154284610872565b6001600160a01b0316145b90508061156d57604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b0316146115a25760405162a1148160e81b815260040160405180910390fd5b6001600160a01b0384166115c957604051633a954ecd60e21b815260040160405180910390fd5b6115d9600084846000015161146c565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102179092559086018083529120549091166116cc576001546001600160801b03168110156116cc57825160008281526004602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000611721826118b3565b9050611733600083836000015161146c565b80516001600160a01b039081166000908152600560209081526040808320805467ffffffffffffffff1981166001600160401b0391821660001901821617909155855185168452818420805467ffffffffffffffff60801b198116600160801b9182900484166001908101851690920217909155865188865260049094528285208054600160e01b9588166001600160e01b031990911617600160a01b42909416939093029290921760ff60e01b1916939093179055908501808352912054909116611853576001546001600160801b031681101561185357815160008281526004602090815260409091208054918501516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b50805160405183916000916001600160a01b03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050600180546001600160801b03600160801b808304821684018216029116179055565b604080516060810182526000808252602082018190529181019190915260015482906001600160801b03168110156119be57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906119bc5780516001600160a01b031615611953579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff16151592810192909252156119b7579392505050565b611953565b505b604051636f96cda160e11b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610767611a34611cda565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611a848585611dcd565b91509150611a9181611e3d565b509392505050565b60006001600160a01b0384163b15611b9c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611add9033908990889088906004016127c1565b602060405180830381600087803b158015611af757600080fd5b505af1925050508015611b27575060408051601f3d908101601f19168201909252611b24918101906125a2565b60015b611b82573d808015611b55576040519150601f19603f3d011682016040523d82523d6000602084013e611b5a565b606091505b508051611b7a576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ba0565b5060015b949350505050565b606081611bcc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611bf65780611be08161290f565b9150611bef9050600a8361285e565b9150611bd0565b6000816001600160401b03811115611c1e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c48576020820181803683370190505b5090505b8415611ba057611c5d600183612891565b9150611c6a600a8661292a565b611c75906030612846565b60f81b818381518110611c9857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611cba600a8661285e565b9450611c4c565b60006114d48284612872565b6107db838383600161203e565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611d2957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600080825160411415611e045760208301516040840151606085015160001a611df8878285856121c6565b94509450505050611e36565b825160401415611e2e5760208301516040840151611e238683836122b3565b935093505050611e36565b506000905060025b9250929050565b6000816004811115611e5f57634e487b7160e01b600052602160045260246000fd5b1415611e685750565b6001816004811115611e8a57634e487b7160e01b600052602160045260246000fd5b1415611ed85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610797565b6002816004811115611efa57634e487b7160e01b600052602160045260246000fd5b1415611f485760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610797565b6003816004811115611f6a57634e487b7160e01b600052602160045260246000fd5b1415611fc35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610797565b6004816004811115611fe557634e487b7160e01b600052602160045260246000fd5b1415610ba55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610797565b6001546001600160801b03166001600160a01b03851661207057604051622e076360e81b815260040160405180910390fd5b8361208e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526004909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b858110156121a05760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483801561217657506121746000888488611a99565b155b15612194576040516368d2bf6b60e11b815260040160405180910390fd5b6001918201910161211f565b50600180546001600160801b0319166001600160801b039290921691909117905561170f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121fd57506000905060036122aa565b8460ff16601b1415801561221557508460ff16601c14155b1561222657506000905060046122aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561227a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122a3576000600192509250506122aa565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016122d4878288856121c6565b935093505050935093915050565b8280546122ee906128d4565b90600052602060002090601f0160209004810192826123105760008555612356565b82601f106123295782800160ff19823516178555612356565b82800160010185558215612356579182015b8281111561235657823582559160200191906001019061233b565b50612362929150612366565b5090565b5b808211156123625760008155600101612367565b80356001600160a01b038116811461239257600080fd5b919050565b8035801515811461239257600080fd5b600082601f8301126123b7578081fd5b81356001600160401b03808211156123d1576123d161296a565b604051601f8301601f19908116603f011681019082821181831017156123f9576123f961296a565b81604052838152866020858801011115612411578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561243e578081fd5b6114d48261237b565b60008060408385031215612459578081fd5b6124628361237b565b91506124706020840161237b565b90509250929050565b60008060006060848603121561248d578081fd5b6124968461237b565b92506124a46020850161237b565b9150604084013590509250925092565b600080600080608085870312156124c9578081fd5b6124d28561237b565b93506124e06020860161237b565b92506040850135915060608501356001600160401b03811115612501578182fd5b61250d878288016123a7565b91505092959194509250565b6000806040838503121561252b578182fd5b6125348361237b565b915061247060208401612397565b60008060408385031215612554578182fd5b61255d8361237b565b946020939093013593505050565b6000806040838503121561257d578182fd5b61255d83612397565b600060208284031215612597578081fd5b81356114d481612980565b6000602082840312156125b3578081fd5b81516114d481612980565b600080602083850312156125d0578182fd5b82356001600160401b03808211156125e6578384fd5b818501915085601f8301126125f9578384fd5b813581811115612607578485fd5b866020828501011115612618578485fd5b60209290920196919550909350505050565b60006020828403121561263b578081fd5b5035919050565b60008060408385031215612654578182fd5b8235915060208301356001600160401b03811115612670578182fd5b61267c858286016123a7565b9150509250929050565b60008060006060848603121561269a578283fd5b833592506020840135915060408401356001600160401b038111156126bd578182fd5b6126c9868287016123a7565b9150509250925092565b600081518084526126eb8160208601602086016128a8565b601f01601f19169290920160200192915050565b600081516127118185602086016128a8565b9290920192915050565b600080845482600182811c91508083168061273757607f831692505b602080841082141561275757634e487b7160e01b87526022600452602487fd5b81801561276b576001811461277c576127a8565b60ff198616895284890196506127a8565b60008b815260209020885b868110156127a05781548b820152908501908301612787565b505084890196505b5050505050506127b881856126ff565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127f4908301846126d3565b9695505050505050565b6020815260006114d460208301846126d3565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156128595761285961293e565b500190565b60008261286d5761286d612954565b500490565b600081600019048311821515161561288c5761288c61293e565b500290565b6000828210156128a3576128a361293e565b500390565b60005b838110156128c35781810151838201526020016128ab565b83811115610f1d5750506000910152565b600181811c908216806128e857607f821691505b6020821081141561290957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129235761292361293e565b5060010190565b60008261293957612939612954565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ba557600080fdfea2646970667358221220558e01f65cf5c80de7bd74d5e3c9c02b75dd16b1326ee2730383f6aecff99c4864736f6c63430008040033687474703a2f2f6170692e6c696f6e64616f6e66742e636f6d2f4d657461646174612f",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80636352211e1161012e57806395d89b41116100ab578063e7908b091161006f578063e7908b0914610644578063e985e9c514610657578063f0f44260146106a0578063f2fde38b146106c0578063fc89bacd146106e057600080fd5b806395d89b41146105b9578063a22cb465146105ce578063b88d4fde146105ee578063c341526b1461060e578063c87b56dd1461062457600080fd5b8063853828b6116100f2578063853828b61461054757806385852ce41461054f5780638b795dcb1461056f5780638d859f3e146105855780638da5cb5b1461059b57600080fd5b80636352211e146104b25780636456c205146104d257806370a08231146104f2578063715018a614610512578063798611a01461052757600080fd5b806323b872dd116101bc57806342966c681161018057806342966c68146104265780634f6ccce71461044657806352e96828146104665780635b769c6d1461047c57806361d027b31461049257600080fd5b806323b872dd1461037f5780632f745c591461039f57806332a61f5f146103bf57806338e21cce146103d957806342842e0e1461040657600080fd5b8063081812fc11610203578063081812fc146102ce578063095ea7b3146103065780630a61454b1461032657806318160ddd1461034a57806318e77a8e1461035f57600080fd5b806301ffc9a71461023557806302244fd01461026a57806302fe53051461028c57806306fdde03146102ac575b600080fd5b34801561024157600080fd5b50610255610250366004612586565b610700565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061028a61028536600461262a565b61076d565b005b34801561029857600080fd5b5061028a6102a73660046125be565b6107a5565b3480156102b857600080fd5b506102c16107e0565b60405161026191906127fe565b3480156102da57600080fd5b506102ee6102e936600461262a565b610872565b6040516001600160a01b039091168152602001610261565b34801561031257600080fd5b5061028a610321366004612542565b6108b6565b34801561033257600080fd5b5061033c60095481565b604051908152602001610261565b34801561035657600080fd5b5061033c61093f565b34801561036b57600080fd5b5061028a61037a366004612542565b61095e565b34801561038b57600080fd5b5061028a61039a366004612479565b610a50565b3480156103ab57600080fd5b5061033c6103ba366004612542565b610a5b565b3480156103cb57600080fd5b50600e546102559060ff1681565b3480156103e557600080fd5b5061033c6103f436600461242d565b60116020526000908152604090205481565b34801561041257600080fd5b5061028a610421366004612479565b610b57565b34801561043257600080fd5b5061028a61044136600461262a565b610b72565b34801561045257600080fd5b5061033c61046136600461262a565b610ba8565b34801561047257600080fd5b5061033c600d5481565b34801561048857600080fd5b5061033c60085481565b34801561049e57600080fd5b506010546102ee906001600160a01b031681565b3480156104be57600080fd5b506102ee6104cd36600461262a565b610c54565b3480156104de57600080fd5b5061028a6104ed36600461262a565b610c66565b3480156104fe57600080fd5b5061033c61050d36600461242d565b610c95565b34801561051e57600080fd5b5061028a610ce3565b34801561053357600080fd5b5061028a61054236600461262a565b610d19565b61028a610d48565b34801561055b57600080fd5b5061025561056a366004612642565b610da3565b34801561057b57600080fd5b5061033c600b5481565b34801561059157600080fd5b5061033c600a5481565b3480156105a757600080fd5b506000546001600160a01b03166102ee565b3480156105c557600080fd5b506102c1610e44565b3480156105da57600080fd5b5061028a6105e9366004612519565b610e53565b3480156105fa57600080fd5b5061028a6106093660046124b4565b610ee9565b34801561061a57600080fd5b5061033c600c5481565b34801561063057600080fd5b506102c161063f36600461262a565b610f23565b61028a610652366004612686565b610f9f565b34801561066357600080fd5b50610255610672366004612447565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b3480156106ac57600080fd5b5061028a6106bb36600461242d565b6112bc565b3480156106cc57600080fd5b5061028a6106db36600461242d565b611357565b3480156106ec57600080fd5b5061028a6106fb36600461256b565b6113ef565b60006001600160e01b031982166380ac58cd60e01b148061073157506001600160e01b03198216635b5e139f60e01b145b8061074c57506001600160e01b0319821663780e9d6360e01b145b8061076757506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146107a05760405162461bcd60e51b815260040161079790612811565b60405180910390fd5b600855565b6000546001600160a01b031633146107cf5760405162461bcd60e51b815260040161079790612811565b6107db600f83836122e2565b505050565b6060600280546107ef906128d4565b80601f016020809104026020016040519081016040528092919081815260200182805461081b906128d4565b80156108685780601f1061083d57610100808354040283529160200191610868565b820191906000526020600020905b81548152906001019060200180831161084b57829003601f168201915b5050505050905090565b600061087d82611436565b61089a576040516333d1c03960e21b815260040160405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006108c182610c54565b9050806001600160a01b0316836001600160a01b031614156108f65760405163250fdee360e21b815260040160405180910390fd5b336001600160a01b0382161480159061091657506109148133610672565b155b15610934576040516367d9dca160e11b815260040160405180910390fd5b6107db83838361146c565b6001546001600160801b03600160801b82048116918116919091031690565b6000546001600160a01b031633146109885760405162461bcd60e51b815260040161079790612811565b60085461099d8261099761093f565b906114c8565b11156109df5760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399026a0ac2fa624a7a71760791b6044820152606401610797565b6109e982826114db565b600c546109f690826114c8565b600c557f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282610a2461093f565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a15050565b6107db8383836114f9565b6000610a6683610c95565b8210610a85576040516306ed618760e11b815260040160405180910390fd5b6001546001600160801b0316600080805b83811015610b5157600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161580159282019290925290610afd5750610b49565b80516001600160a01b031615610b1257805192505b876001600160a01b0316836001600160a01b03161415610b475786841415610b405750935061076792505050565b6001909301925b505b600101610a96565b50600080fd5b6107db83838360405180602001604052806000815250610ee9565b6000546001600160a01b03163314610b9c5760405162461bcd60e51b815260040161079790612811565b610ba581611716565b50565b6001546000906001600160801b031681805b82811015610c3a57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff16151591810182905290610c315785831415610c2a5750949350505050565b6001909201915b50600101610bba565b506040516329c8c00760e21b815260040160405180910390fd5b6000610c5f826118b3565b5192915050565b6000546001600160a01b03163314610c905760405162461bcd60e51b815260040161079790612811565b600a55565b60006001600160a01b038216610cbe576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b03166000908152600560205260409020546001600160401b031690565b6000546001600160a01b03163314610d0d5760405162461bcd60e51b815260040161079790612811565b610d1760006119d7565b565b6000546001600160a01b03163314610d435760405162461bcd60e51b815260040161079790612811565b600955565b6000546001600160a01b03163314610d725760405162461bcd60e51b815260040161079790612811565b6010546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050610d1757600080fd5b600080610e14610e0e7f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec1336040805160208101939093526001600160a01b03909116908201526060810187905260800160405160208183030381529060405280519060200120611a27565b84611a75565b9050806001600160a01b0316610e326000546001600160a01b031690565b6001600160a01b031614949350505050565b6060600380546107ef906128d4565b6001600160a01b038216331415610e7d5760405163b06307db60e01b815260040160405180910390fd5b3360008181526007602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ef48484846114f9565b610f0084848484611a99565b610f1d576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b6060610f2e82611436565b610f6d5760405162461bcd60e51b815260206004820152601060248201526f544f4b454e5f4e4f545f45584953545360801b6044820152606401610797565b600f610f7883611ba8565b604051602001610f8992919061271b565b6040516020818303038152906040529050919050565b600e5460ff161515600114610fed5760405162461bcd60e51b815260206004820152601460248201527357484954454c4953545f4e4f545f41435449564560601b6044820152606401610797565b600d544210156110375760405162461bcd60e51b81526020600482015260156024820152744e4f545f494e5f57484954454c4953545f54494d4560581b6044820152606401610797565b6009546110468461099761093f565b11156110945760405162461bcd60e51b815260206004820152601760248201527f5468697320737461676520697320736f6c64206f7574210000000000000000006044820152606401610797565b61109e8282610da3565b6110ea5760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420656c696769626c6520666f722077686974656c6973742e00000000006044820152606401610797565b600083118015611114575033600090815260116020526040902054829061111190856114c8565b11155b6111605760405162461bcd60e51b815260206004820152601d60248201527f45786365656473206d61782077686974656c697374206e756d6265722e0000006044820152606401610797565b60085461116f8461099761093f565b11156111b15760405162461bcd60e51b815260206004820152601160248201527022bc31b2b2b2399026a0ac2fa624a7a71760791b6044820152606401610797565b600a546111be9084611cc1565b341461121d5760405162461bcd60e51b815260206004820152602860248201527f45746865722076616c75652073656e74206973206e6f7420657175616c2074686044820152673290383934b1b29760c11b6064820152608401610797565b61122733846114db565b600b5461123490846114c8565b600b553360009081526011602052604090205461125190846114c8565b336000818152601160205260409020919091557f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc79560908461128f61093f565b604080516001600160a01b03909416845260208401929092529082015260600160405180910390a1505050565b6000546001600160a01b031633146112e65760405162461bcd60e51b815260040161079790612811565b6010546001600160a01b03166113355760405162461bcd60e51b815260206004820152601460248201527353455454494e475f5a45524f5f4144445245535360601b6044820152606401610797565b601080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146113815760405162461bcd60e51b815260040161079790612811565b6001600160a01b0381166113e65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610797565b610ba5816119d7565b6000546001600160a01b031633146114195760405162461bcd60e51b815260040161079790612811565b600e805460ff191692151592909217909155600d55565b3b151590565b6001546000906001600160801b031682108015610767575050600090815260046020526040902054600160e01b900460ff161590565b60008281526006602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006114d48284612846565b9392505050565b6114f5828260405180602001604052806000815250611ccd565b5050565b6000611504826118b3565b80519091506000906001600160a01b0316336001600160a01b03161480611532575081516115329033610672565b8061154d57503361154284610872565b6001600160a01b0316145b90508061156d57604051632ce44b5f60e11b815260040160405180910390fd5b846001600160a01b031682600001516001600160a01b0316146115a25760405162a1148160e81b815260040160405180910390fd5b6001600160a01b0384166115c957604051633a954ecd60e21b815260040160405180910390fd5b6115d9600084846000015161146c565b6001600160a01b038581166000908152600560209081526040808320805467ffffffffffffffff198082166001600160401b0392831660001901831617909255898616808652838620805493841693831660019081018416949094179055898652600490945282852080546001600160e01b031916909417600160a01b4290921691909102179092559086018083529120549091166116cc576001546001600160801b03168110156116cc57825160008281526004602090815260409091208054918601516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b5082846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45b5050505050565b6000611721826118b3565b9050611733600083836000015161146c565b80516001600160a01b039081166000908152600560209081526040808320805467ffffffffffffffff1981166001600160401b0391821660001901821617909155855185168452818420805467ffffffffffffffff60801b198116600160801b9182900484166001908101851690920217909155865188865260049094528285208054600160e01b9588166001600160e01b031990911617600160a01b42909416939093029290921760ff60e01b1916939093179055908501808352912054909116611853576001546001600160801b031681101561185357815160008281526004602090815260409091208054918501516001600160401b0316600160a01b026001600160e01b03199092166001600160a01b03909316929092171790555b50805160405183916000916001600160a01b03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050600180546001600160801b03600160801b808304821684018216029116179055565b604080516060810182526000808252602082018190529181019190915260015482906001600160801b03168110156119be57600081815260046020908152604091829020825160608101845290546001600160a01b0381168252600160a01b81046001600160401b031692820192909252600160e01b90910460ff161515918101829052906119bc5780516001600160a01b031615611953579392505050565b5060001901600081815260046020908152604091829020825160608101845290546001600160a01b038116808352600160a01b82046001600160401b031693830193909352600160e01b900460ff16151592810192909252156119b7579392505050565b611953565b505b604051636f96cda160e11b815260040160405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000610767611a34611cda565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000611a848585611dcd565b91509150611a9181611e3d565b509392505050565b60006001600160a01b0384163b15611b9c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611add9033908990889088906004016127c1565b602060405180830381600087803b158015611af757600080fd5b505af1925050508015611b27575060408051601f3d908101601f19168201909252611b24918101906125a2565b60015b611b82573d808015611b55576040519150601f19603f3d011682016040523d82523d6000602084013e611b5a565b606091505b508051611b7a576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ba0565b5060015b949350505050565b606081611bcc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611bf65780611be08161290f565b9150611bef9050600a8361285e565b9150611bd0565b6000816001600160401b03811115611c1e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c48576020820181803683370190505b5090505b8415611ba057611c5d600183612891565b9150611c6a600a8661292a565b611c75906030612846565b60f81b818381518110611c9857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611cba600a8661285e565b9450611c4c565b60006114d48284612872565b6107db838383600161203e565b60007f0000000000000000000000000000000000000000000000000000000000000000461415611d2957507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b600080825160411415611e045760208301516040840151606085015160001a611df8878285856121c6565b94509450505050611e36565b825160401415611e2e5760208301516040840151611e238683836122b3565b935093505050611e36565b506000905060025b9250929050565b6000816004811115611e5f57634e487b7160e01b600052602160045260246000fd5b1415611e685750565b6001816004811115611e8a57634e487b7160e01b600052602160045260246000fd5b1415611ed85760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610797565b6002816004811115611efa57634e487b7160e01b600052602160045260246000fd5b1415611f485760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610797565b6003816004811115611f6a57634e487b7160e01b600052602160045260246000fd5b1415611fc35760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610797565b6004816004811115611fe557634e487b7160e01b600052602160045260246000fd5b1415610ba55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610797565b6001546001600160801b03166001600160a01b03851661207057604051622e076360e81b815260040160405180910390fd5b8361208e5760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038516600081815260056020908152604080832080546001600160801b031981166001600160401b038083168c0181169182176801000000000000000067ffffffffffffffff1990941690921783900481168c018116909202179091558584526004909252822080546001600160e01b031916909317600160a01b42909216919091021790915581905b858110156121a05760405182906001600160a01b038916906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a483801561217657506121746000888488611a99565b155b15612194576040516368d2bf6b60e11b815260040160405180910390fd5b6001918201910161211f565b50600180546001600160801b0319166001600160801b039290921691909117905561170f565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156121fd57506000905060036122aa565b8460ff16601b1415801561221557508460ff16601c14155b1561222657506000905060046122aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561227a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166122a3576000600192509250506122aa565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b016122d4878288856121c6565b935093505050935093915050565b8280546122ee906128d4565b90600052602060002090601f0160209004810192826123105760008555612356565b82601f106123295782800160ff19823516178555612356565b82800160010185558215612356579182015b8281111561235657823582559160200191906001019061233b565b50612362929150612366565b5090565b5b808211156123625760008155600101612367565b80356001600160a01b038116811461239257600080fd5b919050565b8035801515811461239257600080fd5b600082601f8301126123b7578081fd5b81356001600160401b03808211156123d1576123d161296a565b604051601f8301601f19908116603f011681019082821181831017156123f9576123f961296a565b81604052838152866020858801011115612411578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121561243e578081fd5b6114d48261237b565b60008060408385031215612459578081fd5b6124628361237b565b91506124706020840161237b565b90509250929050565b60008060006060848603121561248d578081fd5b6124968461237b565b92506124a46020850161237b565b9150604084013590509250925092565b600080600080608085870312156124c9578081fd5b6124d28561237b565b93506124e06020860161237b565b92506040850135915060608501356001600160401b03811115612501578182fd5b61250d878288016123a7565b91505092959194509250565b6000806040838503121561252b578182fd5b6125348361237b565b915061247060208401612397565b60008060408385031215612554578182fd5b61255d8361237b565b946020939093013593505050565b6000806040838503121561257d578182fd5b61255d83612397565b600060208284031215612597578081fd5b81356114d481612980565b6000602082840312156125b3578081fd5b81516114d481612980565b600080602083850312156125d0578182fd5b82356001600160401b03808211156125e6578384fd5b818501915085601f8301126125f9578384fd5b813581811115612607578485fd5b866020828501011115612618578485fd5b60209290920196919550909350505050565b60006020828403121561263b578081fd5b5035919050565b60008060408385031215612654578182fd5b8235915060208301356001600160401b03811115612670578182fd5b61267c858286016123a7565b9150509250929050565b60008060006060848603121561269a578283fd5b833592506020840135915060408401356001600160401b038111156126bd578182fd5b6126c9868287016123a7565b9150509250925092565b600081518084526126eb8160208601602086016128a8565b601f01601f19169290920160200192915050565b600081516127118185602086016128a8565b9290920192915050565b600080845482600182811c91508083168061273757607f831692505b602080841082141561275757634e487b7160e01b87526022600452602487fd5b81801561276b576001811461277c576127a8565b60ff198616895284890196506127a8565b60008b815260209020885b868110156127a05781548b820152908501908301612787565b505084890196505b5050505050506127b881856126ff565b95945050505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906127f4908301846126d3565b9695505050505050565b6020815260006114d460208301846126d3565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156128595761285961293e565b500190565b60008261286d5761286d612954565b500490565b600081600019048311821515161561288c5761288c61293e565b500290565b6000828210156128a3576128a361293e565b500390565b60005b838110156128c35781810151838201526020016128ab565b83811115610f1d5750506000910152565b600181811c908216806128e857607f821691505b6020821081141561290957634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129235761292361293e565b5060010190565b60008261293957612939612954565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b031981168114610ba557600080fdfea2646970667358221220558e01f65cf5c80de7bd74d5e3c9c02b75dd16b1326ee2730383f6aecff99c4864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}. This read function is O(totalSupply). If calling from a separate contract, be sure to test gas first. It may also degrade with extremely large collection sizes (e.g >> 10000), test for your use case."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2901,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 2903,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_burnCounter",
        "offset": 16,
        "slot": "1",
        "type": "t_uint128"
      },
      {
        "astId": 2905,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2912,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_ownerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(TokenOwnership)2892_storage)"
      },
      {
        "astId": 2917,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_addressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AddressData)2899_storage)"
      },
      {
        "astId": 2921,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2927,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4198,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "MAX_LION",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4201,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "STAGE_LIMIT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4204,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "PRICE",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4207,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "numWhitelistSale",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 4210,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "numGiveaway",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4213,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "whitelistSaleTimestamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4216,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "hasWhitelistSaleStarted",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 4219,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 4222,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "treasury",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 4226,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "hasMinted",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(AddressData)2899_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC721A.AddressData)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressData)2899_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TokenOwnership)2892_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenOwnership)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenOwnership)2892_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressData)2899_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.AddressData",
        "members": [
          {
            "astId": 2894,
            "contract": "contracts/LionDAO.sol:LionDAO",
            "label": "balance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2896,
            "contract": "contracts/LionDAO.sol:LionDAO",
            "label": "numberMinted",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2898,
            "contract": "contracts/LionDAO.sol:LionDAO",
            "label": "numberBurned",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TokenOwnership)2892_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenOwnership",
        "members": [
          {
            "astId": 2887,
            "contract": "contracts/LionDAO.sol:LionDAO",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2889,
            "contract": "contracts/LionDAO.sol:LionDAO",
            "label": "startTimestamp",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2891,
            "contract": "contracts/LionDAO.sol:LionDAO",
            "label": "burned",
            "offset": 28,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}