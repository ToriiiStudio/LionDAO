{
  "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "mintEvent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAGE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "giveawayLion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasWhitelistSaleStarted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "mintWhitelistLion",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numGiveaway",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numWhitelistSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_MAX_num",
          "type": "uint256"
        }
      ],
      "name": "setMAX_LION",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_STAGE_LIMIT",
          "type": "uint256"
        }
      ],
      "name": "setSTAGE_LIMIT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_hasWhitelistSaleStarted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_whitelistSaleTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setWhitelistSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "set_PRICE",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxQuantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "SIGNATURE",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistSaleTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
  "receipt": {
    "to": null,
    "from": "0x5279246E3626Cebe71a4c181382A50a71d2A4156",
    "contractAddress": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
    "transactionIndex": 30,
    "gasUsed": "7299778",
    "logsBloom": "0x26200090300010000049005400a4a000000082002012000002800000002000026082000140004a022a00200204a1040400213000060481a0202000161a2c00800410390001200088808800080200000318430040000482118040820c1002001029000a4802084020000000018080083c600041086000060010000010044008400082020c405008000100000000080412180019a0000e4000000002c402020080002401000902000020008182030400600010000842a0806080201008040740004030100280000090440000000000010408642000a24044082400012a401c603ab000522280500008080002100020000008002000108004048319248002882400",
    "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13",
    "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000002"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000003"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000004"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000005"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000006"
        ],
        "data": "0x",
        "logIndex": 55,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000007"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000008"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000009"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000a"
        ],
        "data": "0x",
        "logIndex": 59,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000b"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000c"
        ],
        "data": "0x",
        "logIndex": 61,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000d"
        ],
        "data": "0x",
        "logIndex": 62,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000e"
        ],
        "data": "0x",
        "logIndex": 63,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000000f"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000010"
        ],
        "data": "0x",
        "logIndex": 65,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000011"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000012"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000013"
        ],
        "data": "0x",
        "logIndex": 68,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000014"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000015"
        ],
        "data": "0x",
        "logIndex": 70,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000016"
        ],
        "data": "0x",
        "logIndex": 71,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000017"
        ],
        "data": "0x",
        "logIndex": 72,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000018"
        ],
        "data": "0x",
        "logIndex": 73,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000019"
        ],
        "data": "0x",
        "logIndex": 74,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001a"
        ],
        "data": "0x",
        "logIndex": 75,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001b"
        ],
        "data": "0x",
        "logIndex": 76,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001c"
        ],
        "data": "0x",
        "logIndex": 77,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001d"
        ],
        "data": "0x",
        "logIndex": 78,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001e"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000001f"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000020"
        ],
        "data": "0x",
        "logIndex": 81,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000021"
        ],
        "data": "0x",
        "logIndex": 82,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000022"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000023"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000024"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000025"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000026"
        ],
        "data": "0x",
        "logIndex": 87,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000027"
        ],
        "data": "0x",
        "logIndex": 88,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000028"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000029"
        ],
        "data": "0x",
        "logIndex": 90,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002a"
        ],
        "data": "0x",
        "logIndex": 91,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002b"
        ],
        "data": "0x",
        "logIndex": 92,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002c"
        ],
        "data": "0x",
        "logIndex": 93,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002d"
        ],
        "data": "0x",
        "logIndex": 94,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002e"
        ],
        "data": "0x",
        "logIndex": 95,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000002f"
        ],
        "data": "0x",
        "logIndex": 96,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000030"
        ],
        "data": "0x",
        "logIndex": 97,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000031"
        ],
        "data": "0x",
        "logIndex": 98,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000032"
        ],
        "data": "0x",
        "logIndex": 99,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000033"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000034"
        ],
        "data": "0x",
        "logIndex": 101,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000035"
        ],
        "data": "0x",
        "logIndex": 102,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000036"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000037"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000038"
        ],
        "data": "0x",
        "logIndex": 105,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000039"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000003a"
        ],
        "data": "0x",
        "logIndex": 107,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000003b"
        ],
        "data": "0x",
        "logIndex": 108,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000003c"
        ],
        "data": "0x",
        "logIndex": 109,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000003d"
        ],
        "data": "0x",
        "logIndex": 110,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000003e"
        ],
        "data": "0x",
        "logIndex": 111,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000003f"
        ],
        "data": "0x",
        "logIndex": 112,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000040"
        ],
        "data": "0x",
        "logIndex": 113,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000041"
        ],
        "data": "0x",
        "logIndex": 114,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000042"
        ],
        "data": "0x",
        "logIndex": 115,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000043"
        ],
        "data": "0x",
        "logIndex": 116,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000044"
        ],
        "data": "0x",
        "logIndex": 117,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000045"
        ],
        "data": "0x",
        "logIndex": 118,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000046"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000047"
        ],
        "data": "0x",
        "logIndex": 120,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000048"
        ],
        "data": "0x",
        "logIndex": 121,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000049"
        ],
        "data": "0x",
        "logIndex": 122,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000004a"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000004b"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000004c"
        ],
        "data": "0x",
        "logIndex": 125,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000004d"
        ],
        "data": "0x",
        "logIndex": 126,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000004e"
        ],
        "data": "0x",
        "logIndex": 127,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000004f"
        ],
        "data": "0x",
        "logIndex": 128,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000050"
        ],
        "data": "0x",
        "logIndex": 129,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000051"
        ],
        "data": "0x",
        "logIndex": 130,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000052"
        ],
        "data": "0x",
        "logIndex": 131,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000053"
        ],
        "data": "0x",
        "logIndex": 132,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000054"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000055"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000056"
        ],
        "data": "0x",
        "logIndex": 135,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000057"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000058"
        ],
        "data": "0x",
        "logIndex": 137,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000059"
        ],
        "data": "0x",
        "logIndex": 138,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000005a"
        ],
        "data": "0x",
        "logIndex": 139,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000005b"
        ],
        "data": "0x",
        "logIndex": 140,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000005c"
        ],
        "data": "0x",
        "logIndex": 141,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000005d"
        ],
        "data": "0x",
        "logIndex": 142,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000005e"
        ],
        "data": "0x",
        "logIndex": 143,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x000000000000000000000000000000000000000000000000000000000000005f"
        ],
        "data": "0x",
        "logIndex": 144,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000060"
        ],
        "data": "0x",
        "logIndex": 145,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000061"
        ],
        "data": "0x",
        "logIndex": 146,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000062"
        ],
        "data": "0x",
        "logIndex": 147,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000063"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      },
      {
        "transactionIndex": 30,
        "blockNumber": 10296964,
        "transactionHash": "0x4c0467816ce84c86a4240edfa7f3018da2117083eb841898fc69c38e37dcb0ef",
        "address": "0x0dA7601BD5a828a65d06d2cd9A4C2A5a6d43caE8",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005279246e3626cebe71a4c181382a50a71d2a4156",
          "0x0000000000000000000000000000000000000000000000000000000000000064"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0x050d5da023e3c8a74100668e58730f859602102f9e4fa979f47521148aa66d13"
      }
    ],
    "blockNumber": 10296964,
    "cumulativeGasUsed": "14739548",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6ecc97b059698b8de6910911ffa711e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"mintEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"giveawayLion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasWhitelistSaleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"mintWhitelistLion\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numGiveaway\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numWhitelistSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_MAX_num\",\"type\":\"uint256\"}],\"name\":\"setMAX_LION\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_STAGE_LIMIT\",\"type\":\"uint256\"}],\"name\":\"setSTAGE_LIMIT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_hasWhitelistSaleStarted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_whitelistSaleTimestamp\",\"type\":\"uint256\"}],\"name\":\"setWhitelistSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"set_PRICE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"SIGNATURE\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistSaleTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LionDAO.sol\":\"LionDAO\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0xba18d725602452307e5b278ed4566616c63792d89f3a0388a6f285428c26e681\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/ERC721B.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract ERC721B is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    address[] internal _owners;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n\\n        uint count = 0;\\n        uint length = _owners.length;\\n        for( uint i = 0; i < length; ++i ){\\n          if( owner == _owners[i] ){\\n            ++count;\\n          }\\n        }\\n\\n        delete length;\\n        return count;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721B.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return tokenId < _owners.length && _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721B.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n        _owners.push(to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721B.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n        _owners[tokenId] = address(0);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721B.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721B.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0x77a5b568049f9b17cb92d3cf1584c4311bfdacbd4694db4525bc5c7eb9f7a85c\",\"license\":\"BSD-3-Clause\"},\"contracts/LionDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport './ERC721B.sol';\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\n//  _     ___   ___   _  _   ___     _     ___\\n// | |   |_ _| / _ \\\\ | \\\\| | |   \\\\   /_\\\\   / _ \\\\\\n// | |__  | | | (_) || .` | | |) | / _ \\\\ | (_) |\\n// |____||___| \\\\___/ |_|\\\\_| |___/ /_/ \\\\_\\\\ \\\\___/\\n\\n\\ncontract LionDAO is Ownable, EIP712, ERC721B {\\n\\n\\tusing SafeMath for uint256;\\n\\tusing Strings for uint256;\\n\\n\\t// Sales variables\\n\\t// ------------------------------------------------------------------------\\n\\tuint public MAX_LION = 10000;\\n\\tuint public STAGE_LIMIT = 434;\\n\\tuint public PRICE = 0.8 ether;\\n\\tuint public numWhitelistSale = 0;\\n\\tuint public numGiveaway = 0;\\n\\tuint public totalSupply = 0;\\n\\tbool public hasWhitelistSaleStarted = true; //\\n\\tstring private _baseTokenURI = \\\"http://api.lion/Metadata/\\\"; //\\n\\taddress public treasury = 0x5279246E3626Cebe71a4c181382A50a71d2A4156; //\\n\\n\\tmapping (address => uint256) public hasMinted;\\n\\n    uint256 public whitelistSaleTimestamp = 1646719200; // \\n\\n\\t// Events\\n\\t// ------------------------------------------------------------------------\\n\\tevent mintEvent(address owner, uint256 quantity, uint256 totalSupply);\\n\\t\\n\\t// Constructor\\n\\t// ------------------------------------------------------------------------\\n\\tconstructor()\\n\\tEIP712(\\\"LIONDAO\\\", \\\"1.0.0\\\")  \\n\\tERC721B(\\\"LIONDAO\\\", \\\"LION\\\"){\\n\\t\\tfor (uint i = 0; i < 101; i++) {\\n\\t\\t\\t_safeMint(owner(), totalSupply);\\n\\t\\t\\ttotalSupply = totalSupply.add(1);\\n\\t\\t}\\n\\t}\\n\\n    // Modifiers\\n    // ------------------------------------------------------------------------\\n    modifier onlyWhitelistSale() {\\n\\t\\trequire(hasWhitelistSaleStarted == true, \\\"WHITELIST_NOT_ACTIVE\\\");\\n        require(block.timestamp >= whitelistSaleTimestamp, \\\"NOT_IN_WHITELIST_TIME\\\");\\n        _;\\n    }\\n\\n\\t// Verify functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction verify(uint256 maxQuantity, bytes memory SIGNATURE) public view returns (bool){\\n\\t\\taddress recoveredAddr = ECDSA.recover(_hashTypedDataV4(keccak256(abi.encode(keccak256(\\\"NFT(address addressForClaim,uint256 maxQuantity)\\\"), _msgSender(), maxQuantity))), SIGNATURE);\\n\\n\\t\\treturn owner() == recoveredAddr;\\n\\t}\\n\\n\\t// Whitelist functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction mintWhitelistLion(uint256 quantity, uint256 maxQuantity, bytes memory SIGNATURE) external payable onlyWhitelistSale{\\n\\t\\trequire(totalSupply.add(quantity) <= STAGE_LIMIT, \\\"This stage is sold out!\\\");\\n\\t\\trequire(verify(maxQuantity, SIGNATURE), \\\"Not eligible for whitelist.\\\");\\n\\t\\trequire(quantity > 0 && hasMinted[msg.sender].add(quantity) <= maxQuantity, \\\"Exceeds max whitelist number.\\\");\\n\\t\\trequire(totalSupply.add(quantity) <= MAX_LION, \\\"Exceeds MAX_LION.\\\");\\n\\t\\trequire(msg.value == PRICE.mul(quantity), \\\"Ether value sent is not equal the price.\\\");\\n\\n\\t\\tfor (uint i = 0; i < quantity; i++) {\\n\\t\\t\\t_safeMint(msg.sender, totalSupply);\\n\\t\\t\\ttotalSupply = totalSupply.add(1);\\n\\t\\t}\\n\\n\\t\\tnumWhitelistSale = numWhitelistSale.add(quantity);\\n\\t\\thasMinted[msg.sender] = hasMinted[msg.sender].add(quantity);\\n\\n\\t\\temit mintEvent(msg.sender, quantity, totalSupply);\\n\\t}\\n\\n\\t// Giveaway functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction giveawayLion(address _to, uint256 quantity) external onlyOwner{\\n\\t\\trequire(totalSupply.add(quantity) <= MAX_LION, \\\"Exceeds MAX_LION.\\\");\\n\\n\\t\\tfor (uint i = 0; i < quantity; i++) {\\n\\t\\t\\t_safeMint(_to, totalSupply);\\n\\t\\t\\ttotalSupply = totalSupply.add(1);\\n\\t\\t}\\n\\n\\t\\tnumGiveaway = numGiveaway.add(quantity);\\n\\t\\temit mintEvent(_to, quantity, totalSupply);\\n\\t}\\n\\n\\t// Base URI Functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\n\\t\\trequire(_exists(tokenId), \\\"TOKEN_NOT_EXISTS\\\");\\n\\t\\t\\n\\t\\treturn string(abi.encodePacked(_baseTokenURI, tokenId.toString()));\\n\\t}\\n\\n    // Burn Functions\\n    // ------------------------------------------------------------------------\\n    function burn(uint256 tokenId) external onlyOwner {\\n        _burn(tokenId);\\n    }\\n\\n\\t// setting functions\\n\\t// ------------------------------------------------------------------------\\n\\tfunction setURI(string calldata _tokenURI) external onlyOwner {\\n\\t\\t_baseTokenURI = _tokenURI;\\n\\t}\\n\\n\\tfunction setSTAGE_LIMIT(uint _STAGE_LIMIT) external onlyOwner {\\n\\t\\tSTAGE_LIMIT = _STAGE_LIMIT;\\n\\t}\\n\\n\\tfunction setMAX_LION(uint _MAX_num) external onlyOwner {\\n\\t\\tMAX_LION = _MAX_num;\\n\\t}\\n\\n\\tfunction set_PRICE(uint _price) external onlyOwner {\\n\\t\\tPRICE = _price;\\n\\t}\\n\\n    function setWhitelistSale(bool _hasWhitelistSaleStarted,uint256 _whitelistSaleTimestamp) external onlyOwner {\\n        hasWhitelistSaleStarted = _hasWhitelistSaleStarted;\\n        whitelistSaleTimestamp = _whitelistSaleTimestamp;\\n    }\\n\\n\\t// Withdrawal functions\\n\\t// ------------------------------------------------------------------------\\n    function setTreasury(address _treasury) external onlyOwner {\\n        require(treasury != address(0), \\\"SETTING_ZERO_ADDRESS\\\");\\n        treasury = _treasury;\\n    }\\n\\n\\tfunction withdrawAll() public payable onlyOwner {\\n\\t\\trequire(payable(treasury).send(address(this).balance));\\n\\t}\\n}\\n  \",\"keccak256\":\"0x0c8250fc226f5e4d0e519234ce537d74f37947e2eb22c8fc306b37abff3338f7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80636456c2051161012357806395d89b41116100ab578063e7908b091161006f578063e7908b09146107b2578063e985e9c5146107ce578063f0f442601461080b578063f2fde38b14610834578063fc89bacd1461085d5761021a565b806395d89b41146106cd578063a22cb465146106f8578063b88d4fde14610721578063c341526b1461074a578063c87b56dd146107755761021a565b8063853828b6116100f2578063853828b61461060557806385852ce41461060f5780638b795dcb1461064c5780638d859f3e146106775780638da5cb5b146106a25761021a565b80636456c2051461055f57806370a0823114610588578063715018a6146105c5578063798611a0146105dc5761021a565b806323b872dd116101a657806342966c681161017557806342966c681461047857806352e96828146104a15780635b769c6d146104cc57806361d027b3146104f75780636352211e146105225761021a565b806323b872dd146103be57806332a61f5f146103e757806338e21cce1461041257806342842e0e1461044f5761021a565b8063081812fc116101ed578063081812fc146102d9578063095ea7b3146103165780630a61454b1461033f57806318160ddd1461036a57806318e77a8e146103955761021a565b806301ffc9a71461021f57806302244fd01461025c57806302fe53051461028557806306fdde03146102ae575b600080fd5b34801561022b57600080fd5b50610246600480360381019061024191906135d8565b610886565b6040516102539190613dc7565b60405180910390f35b34801561026857600080fd5b50610283600480360381019061027e919061366f565b610968565b005b34801561029157600080fd5b506102ac60048036038101906102a7919061362a565b6109ee565b005b3480156102ba57600080fd5b506102c3610a80565b6040516102d09190613eb1565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb919061366f565b610b12565b60405161030d9190613d29565b60405180910390f35b34801561032257600080fd5b5061033d60048036038101906103389190613560565b610b97565b005b34801561034b57600080fd5b50610354610caf565b6040516103619190614253565b60405180910390f35b34801561037657600080fd5b5061037f610cb5565b60405161038c9190614253565b60405180910390f35b3480156103a157600080fd5b506103bc60048036038101906103b79190613560565b610cbb565b005b3480156103ca57600080fd5b506103e560048036038101906103e0919061345a565b610e33565b005b3480156103f357600080fd5b506103fc610e93565b6040516104099190613dc7565b60405180910390f35b34801561041e57600080fd5b50610439600480360381019061043491906133f5565b610ea6565b6040516104469190614253565b60405180910390f35b34801561045b57600080fd5b506104766004803603810190610471919061345a565b610ebe565b005b34801561048457600080fd5b5061049f600480360381019061049a919061366f565b610ede565b005b3480156104ad57600080fd5b506104b6610f66565b6040516104c39190614253565b60405180910390f35b3480156104d857600080fd5b506104e1610f6c565b6040516104ee9190614253565b60405180910390f35b34801561050357600080fd5b5061050c610f72565b6040516105199190613d29565b60405180910390f35b34801561052e57600080fd5b506105496004803603810190610544919061366f565b610f98565b6040516105569190613d29565b60405180910390f35b34801561056b57600080fd5b506105866004803603810190610581919061366f565b61107b565b005b34801561059457600080fd5b506105af60048036038101906105aa91906133f5565b611101565b6040516105bc9190614253565b60405180910390f35b3480156105d157600080fd5b506105da61124d565b005b3480156105e857600080fd5b5061060360048036038101906105fe919061366f565b6112d5565b005b61060d61135b565b005b34801561061b57600080fd5b5061063660048036038101906106319190613698565b611439565b6040516106439190613dc7565b60405180910390f35b34801561065857600080fd5b506106616114e0565b60405161066e9190614253565b60405180910390f35b34801561068357600080fd5b5061068c6114e6565b6040516106999190614253565b60405180910390f35b3480156106ae57600080fd5b506106b76114ec565b6040516106c49190613d29565b60405180910390f35b3480156106d957600080fd5b506106e2611515565b6040516106ef9190613eb1565b60405180910390f35b34801561070457600080fd5b5061071f600480360381019061071a9190613524565b6115a7565b005b34801561072d57600080fd5b50610748600480360381019061074391906134a9565b611728565b005b34801561075657600080fd5b5061075f61178a565b60405161076c9190614253565b60405180910390f35b34801561078157600080fd5b5061079c6004803603810190610797919061366f565b611790565b6040516107a99190613eb1565b60405180910390f35b6107cc60048036038101906107c791906136ec565b61180c565b005b3480156107da57600080fd5b506107f560048036038101906107f0919061341e565b611bd1565b6040516108029190613dc7565b60405180910390f35b34801561081757600080fd5b50610832600480360381019061082d91906133f5565b611c65565b005b34801561084057600080fd5b5061085b600480360381019061085691906133f5565b611db7565b005b34801561086957600080fd5b50610884600480360381019061087f919061359c565b611eaf565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061095157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610961575061096082611f79565b5b9050919050565b610970611fe3565b73ffffffffffffffffffffffffffffffffffffffff1661098e6114ec565b73ffffffffffffffffffffffffffffffffffffffff16146109e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109db90614173565b60405180910390fd5b8060068190555050565b6109f6611fe3565b73ffffffffffffffffffffffffffffffffffffffff16610a146114ec565b73ffffffffffffffffffffffffffffffffffffffff1614610a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6190614173565b60405180910390fd5b8181600d9190610a7b929190613237565b505050565b606060018054610a8f906144fe565b80601f0160208091040260200160405190810160405280929190818152602001828054610abb906144fe565b8015610b085780601f10610add57610100808354040283529160200191610b08565b820191906000526020600020905b815481529060010190602001808311610aeb57829003601f168201915b5050505050905090565b6000610b1d82611feb565b610b5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5390614153565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610ba282610f98565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a906141d3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610c32611fe3565b73ffffffffffffffffffffffffffffffffffffffff161480610c615750610c6081610c5b611fe3565b611bd1565b5b610ca0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9790614073565b60405180910390fd5b610caa8383612099565b505050565b60075481565b600b5481565b610cc3611fe3565b73ffffffffffffffffffffffffffffffffffffffff16610ce16114ec565b73ffffffffffffffffffffffffffffffffffffffff1614610d37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2e90614173565b60405180910390fd5b600654610d4f82600b54611f5090919063ffffffff16565b1115610d90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8790614053565b60405180910390fd5b60005b81811015610dd657610da783600b54612152565b610dbd6001600b54611f5090919063ffffffff16565b600b819055508080610dce90614561565b915050610d93565b50610dec81600a54611f5090919063ffffffff16565b600a819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795608282600b54604051610e2793929190613d90565b60405180910390a15050565b610e44610e3e611fe3565b82612170565b610e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7a906141f3565b60405180910390fd5b610e8e83838361224e565b505050565b600c60009054906101000a900460ff1681565b600f6020528060005260406000206000915090505481565b610ed983838360405180602001604052806000815250611728565b505050565b610ee6611fe3565b73ffffffffffffffffffffffffffffffffffffffff16610f046114ec565b73ffffffffffffffffffffffffffffffffffffffff1614610f5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5190614173565b60405180910390fd5b610f638161242d565b50565b60105481565b60065481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060038381548110610fd5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611072576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611069906140b3565b60405180910390fd5b80915050919050565b611083611fe3565b73ffffffffffffffffffffffffffffffffffffffff166110a16114ec565b73ffffffffffffffffffffffffffffffffffffffff16146110f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ee90614173565b60405180910390fd5b8060088190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611172576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116990614093565b60405180910390fd5b600080600380549050905060005b8181101561123e57600381815481106111c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561122d578261122a90614561565b92505b8061123790614561565b9050611180565b50600090508192505050919050565b611255611fe3565b73ffffffffffffffffffffffffffffffffffffffff166112736114ec565b73ffffffffffffffffffffffffffffffffffffffff16146112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c090614173565b60405180910390fd5b6112d36000612535565b565b6112dd611fe3565b73ffffffffffffffffffffffffffffffffffffffff166112fb6114ec565b73ffffffffffffffffffffffffffffffffffffffff1614611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890614173565b60405180910390fd5b8060078190555050565b611363611fe3565b73ffffffffffffffffffffffffffffffffffffffff166113816114ec565b73ffffffffffffffffffffffffffffffffffffffff16146113d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ce90614173565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505061143757600080fd5b565b60008061149f6114997f182854de6a51f3818344a7eb784b9d55c1e6d2d20c9f9aea309f5daaaaddfec161146b611fe3565b8760405160200161147e93929190613de2565b604051602081830303815290604052805190602001206125f9565b84612613565b90508073ffffffffffffffffffffffffffffffffffffffff166114c06114ec565b73ffffffffffffffffffffffffffffffffffffffff161491505092915050565b60095481565b60085481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060028054611524906144fe565b80601f0160208091040260200160405190810160405280929190818152602001828054611550906144fe565b801561159d5780601f106115725761010080835404028352916020019161159d565b820191906000526020600020905b81548152906001019060200180831161158057829003601f168201915b5050505050905090565b6115af611fe3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561161d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161490613ff3565b60405180910390fd5b806005600061162a611fe3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166116d7611fe3565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171c9190613dc7565b60405180910390a35050565b611739611733611fe3565b83612170565b611778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176f906141f3565b60405180910390fd5b6117848484848461263a565b50505050565b600a5481565b606061179b82611feb565b6117da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d1906140d3565b60405180910390fd5b600d6117e583612696565b6040516020016117f6929190613cce565b6040516020818303038152906040529050919050565b60011515600c60009054906101000a900460ff16151514611862576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185990614233565b60405180910390fd5b6010544210156118a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189e90614213565b60405180910390fd5b6007546118bf84600b54611f5090919063ffffffff16565b1115611900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f790614113565b60405180910390fd5b61190a8282611439565b611949576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194090613f13565b60405180910390fd5b6000831180156119aa5750816119a784600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5090919063ffffffff16565b11155b6119e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e0906141b3565b60405180910390fd5b600654611a0184600b54611f5090919063ffffffff16565b1115611a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3990614053565b60405180910390fd5b611a578360085461284390919063ffffffff16565b3414611a98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8f90613f73565b60405180910390fd5b60005b83811015611ade57611aaf33600b54612152565b611ac56001600b54611f5090919063ffffffff16565b600b819055508080611ad690614561565b915050611a9b565b50611af483600954611f5090919063ffffffff16565b600981905550611b4c83600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f5090919063ffffffff16565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f9670c8b300c38cd3db8d3f9429dd902e67f418c4dd193e2497f06d20efc795603384600b54604051611bc493929190613d90565b60405180910390a1505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611c6d611fe3565b73ffffffffffffffffffffffffffffffffffffffff16611c8b6114ec565b73ffffffffffffffffffffffffffffffffffffffff1614611ce1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd890614173565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611d73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6a90613ef3565b60405180910390fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611dbf611fe3565b73ffffffffffffffffffffffffffffffffffffffff16611ddd6114ec565b73ffffffffffffffffffffffffffffffffffffffff1614611e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2a90614173565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9a90613f93565b60405180910390fd5b611eac81612535565b50565b611eb7611fe3565b73ffffffffffffffffffffffffffffffffffffffff16611ed56114ec565b73ffffffffffffffffffffffffffffffffffffffff1614611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2290614173565b60405180910390fd5b81600c60006101000a81548160ff021916908315150217905550806010819055505050565b60008183611f5e919061431c565b905092915050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b6000600380549050821080156120925750600073ffffffffffffffffffffffffffffffffffffffff166003838154811061204e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661210c83610f98565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b61216c828260405180602001604052806000815250612859565b5050565b600061217b82611feb565b6121ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b190614033565b60405180910390fd5b60006121c583610f98565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061223457508373ffffffffffffffffffffffffffffffffffffffff1661221c84610b12565b73ffffffffffffffffffffffffffffffffffffffff16145b8061224557506122448185611bd1565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661226e82610f98565b73ffffffffffffffffffffffffffffffffffffffff16146122c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bb90614193565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232b90613fd3565b60405180910390fd5b61233f8383836128b4565b61234a600082612099565b8160038281548110612385577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600061243882610f98565b9050612446816000846128b4565b612451600083612099565b60006003838154811061248d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061260c6126066128b9565b8361297c565b9050919050565b600080600061262285856129af565b9150915061262f81612a32565b819250505092915050565b61264584848461224e565b61265184848484612d83565b612690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268790613f53565b60405180910390fd5b50505050565b606060008214156126de576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061283e565b600082905060005b600082146127105780806126f990614561565b915050600a826127099190614372565b91506126e6565b60008167ffffffffffffffff811115612752577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156127845781602001600182028036833780820191505090505b5090505b600085146128375760018261279d91906143fd565b9150600a856127ac91906145b4565b60306127b8919061431c565b60f81b8183815181106127f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856128309190614372565b9450612788565b8093505050505b919050565b6000818361285191906143a3565b905092915050565b6128638383612f1a565b6128706000848484612d83565b6128af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a690613f53565b60405180910390fd5b505050565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000046141561290b577f00000000000000000000000000000000000000000000000000000000000000009050612979565b6129767f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006130a2565b90505b90565b60008282604051602001612991929190613cf2565b60405160208183030381529060405280519060200120905092915050565b6000806041835114156129f15760008060006020860151925060408601519150606086015160001a90506129e5878285856130dc565b94509450505050612a2b565b604083511415612a22576000806020850151915060408501519050612a178683836131e9565b935093505050612a2b565b60006002915091505b9250929050565b60006004811115612a6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612aa5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612ab057612d80565b60016004811115612aea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612b23577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5b90613ed3565b60405180910390fd5b60026004811115612b9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612bd7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612c18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0f90613f33565b60405180910390fd5b60036004811115612c52577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612c8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612ccc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cc390614013565b60405180910390fd5b600480811115612d05577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612d3e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d76906140f3565b60405180910390fd5b5b50565b6000612da48473ffffffffffffffffffffffffffffffffffffffff16611f66565b15612f0d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612dcd611fe3565b8786866040518563ffffffff1660e01b8152600401612def9493929190613d44565b602060405180830381600087803b158015612e0957600080fd5b505af1925050508015612e3a57506040513d601f19601f82011682018060405250810190612e379190613601565b60015b612ebd573d8060008114612e6a576040519150601f19603f3d011682016040523d82523d6000602084013e612e6f565b606091505b50600081511415612eb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eac90613f53565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612f12565b600190505b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612f8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8190614133565b60405180910390fd5b612f9381611feb565b15612fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fca90613fb3565b60405180910390fd5b612fdf600083836128b4565b6003829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600083838346306040516020016130bd959493929190613e19565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156131175760006003915091506131e0565b601b8560ff161415801561312f5750601c8560ff1614155b156131415760006004915091506131e0565b6000600187878787604051600081526020016040526040516131669493929190613e6c565b6020604051602081039080840390855afa158015613188573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156131d7576000600192509250506131e0565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050613229878288856130dc565b935093505050935093915050565b828054613243906144fe565b90600052602060002090601f01602090048101928261326557600085556132ac565b82601f1061327e57803560ff19168380011785556132ac565b828001600101855582156132ac579182015b828111156132ab578235825591602001919060010190613290565b5b5090506132b991906132bd565b5090565b5b808211156132d65760008160009055506001016132be565b5090565b60006132ed6132e884614293565b61426e565b90508281526020810184848401111561330557600080fd5b6133108482856144bc565b509392505050565b60008135905061332781614d6b565b92915050565b60008135905061333c81614d82565b92915050565b60008135905061335181614d99565b92915050565b60008151905061336681614d99565b92915050565b600082601f83011261337d57600080fd5b813561338d8482602086016132da565b91505092915050565b60008083601f8401126133a857600080fd5b8235905067ffffffffffffffff8111156133c157600080fd5b6020830191508360018202830111156133d957600080fd5b9250929050565b6000813590506133ef81614db0565b92915050565b60006020828403121561340757600080fd5b600061341584828501613318565b91505092915050565b6000806040838503121561343157600080fd5b600061343f85828601613318565b925050602061345085828601613318565b9150509250929050565b60008060006060848603121561346f57600080fd5b600061347d86828701613318565b935050602061348e86828701613318565b925050604061349f868287016133e0565b9150509250925092565b600080600080608085870312156134bf57600080fd5b60006134cd87828801613318565b94505060206134de87828801613318565b93505060406134ef878288016133e0565b925050606085013567ffffffffffffffff81111561350c57600080fd5b6135188782880161336c565b91505092959194509250565b6000806040838503121561353757600080fd5b600061354585828601613318565b92505060206135568582860161332d565b9150509250929050565b6000806040838503121561357357600080fd5b600061358185828601613318565b9250506020613592858286016133e0565b9150509250929050565b600080604083850312156135af57600080fd5b60006135bd8582860161332d565b92505060206135ce858286016133e0565b9150509250929050565b6000602082840312156135ea57600080fd5b60006135f884828501613342565b91505092915050565b60006020828403121561361357600080fd5b600061362184828501613357565b91505092915050565b6000806020838503121561363d57600080fd5b600083013567ffffffffffffffff81111561365757600080fd5b61366385828601613396565b92509250509250929050565b60006020828403121561368157600080fd5b600061368f848285016133e0565b91505092915050565b600080604083850312156136ab57600080fd5b60006136b9858286016133e0565b925050602083013567ffffffffffffffff8111156136d657600080fd5b6136e28582860161336c565b9150509250929050565b60008060006060848603121561370157600080fd5b600061370f868287016133e0565b9350506020613720868287016133e0565b925050604084013567ffffffffffffffff81111561373d57600080fd5b6137498682870161336c565b9150509250925092565b61375c81614431565b82525050565b61376b81614443565b82525050565b61377a8161444f565b82525050565b61379161378c8261444f565b6145aa565b82525050565b60006137a2826142d9565b6137ac81856142ef565b93506137bc8185602086016144cb565b6137c5816146a1565b840191505092915050565b60006137db826142e4565b6137e58185614300565b93506137f58185602086016144cb565b6137fe816146a1565b840191505092915050565b6000613814826142e4565b61381e8185614311565b935061382e8185602086016144cb565b80840191505092915050565b60008154613847816144fe565b6138518186614311565b9450600182166000811461386c576001811461387d576138b0565b60ff198316865281860193506138b0565b613886856142c4565b60005b838110156138a857815481890152600182019150602081019050613889565b838801955050505b50505092915050565b60006138c6601883614300565b91506138d1826146b2565b602082019050919050565b60006138e9601483614300565b91506138f4826146db565b602082019050919050565b600061390c601b83614300565b915061391782614704565b602082019050919050565b600061392f601f83614300565b915061393a8261472d565b602082019050919050565b6000613952603283614300565b915061395d82614756565b604082019050919050565b6000613975602883614300565b9150613980826147a5565b604082019050919050565b6000613998602683614300565b91506139a3826147f4565b604082019050919050565b60006139bb601c83614300565b91506139c682614843565b602082019050919050565b60006139de600283614311565b91506139e98261486c565b600282019050919050565b6000613a01602483614300565b9150613a0c82614895565b604082019050919050565b6000613a24601983614300565b9150613a2f826148e4565b602082019050919050565b6000613a47602283614300565b9150613a528261490d565b604082019050919050565b6000613a6a602c83614300565b9150613a758261495c565b604082019050919050565b6000613a8d601183614300565b9150613a98826149ab565b602082019050919050565b6000613ab0603883614300565b9150613abb826149d4565b604082019050919050565b6000613ad3602a83614300565b9150613ade82614a23565b604082019050919050565b6000613af6602983614300565b9150613b0182614a72565b604082019050919050565b6000613b19601083614300565b9150613b2482614ac1565b602082019050919050565b6000613b3c602283614300565b9150613b4782614aea565b604082019050919050565b6000613b5f601783614300565b9150613b6a82614b39565b602082019050919050565b6000613b82602083614300565b9150613b8d82614b62565b602082019050919050565b6000613ba5602c83614300565b9150613bb082614b8b565b604082019050919050565b6000613bc8602083614300565b9150613bd382614bda565b602082019050919050565b6000613beb602983614300565b9150613bf682614c03565b604082019050919050565b6000613c0e601d83614300565b9150613c1982614c52565b602082019050919050565b6000613c31602183614300565b9150613c3c82614c7b565b604082019050919050565b6000613c54603183614300565b9150613c5f82614cca565b604082019050919050565b6000613c77601583614300565b9150613c8282614d19565b602082019050919050565b6000613c9a601483614300565b9150613ca582614d42565b602082019050919050565b613cb9816144a5565b82525050565b613cc8816144af565b82525050565b6000613cda828561383a565b9150613ce68284613809565b91508190509392505050565b6000613cfd826139d1565b9150613d098285613780565b602082019150613d198284613780565b6020820191508190509392505050565b6000602082019050613d3e6000830184613753565b92915050565b6000608082019050613d596000830187613753565b613d666020830186613753565b613d736040830185613cb0565b8181036060830152613d858184613797565b905095945050505050565b6000606082019050613da56000830186613753565b613db26020830185613cb0565b613dbf6040830184613cb0565b949350505050565b6000602082019050613ddc6000830184613762565b92915050565b6000606082019050613df76000830186613771565b613e046020830185613753565b613e116040830184613cb0565b949350505050565b600060a082019050613e2e6000830188613771565b613e3b6020830187613771565b613e486040830186613771565b613e556060830185613cb0565b613e626080830184613753565b9695505050505050565b6000608082019050613e816000830187613771565b613e8e6020830186613cbf565b613e9b6040830185613771565b613ea86060830184613771565b95945050505050565b60006020820190508181036000830152613ecb81846137d0565b905092915050565b60006020820190508181036000830152613eec816138b9565b9050919050565b60006020820190508181036000830152613f0c816138dc565b9050919050565b60006020820190508181036000830152613f2c816138ff565b9050919050565b60006020820190508181036000830152613f4c81613922565b9050919050565b60006020820190508181036000830152613f6c81613945565b9050919050565b60006020820190508181036000830152613f8c81613968565b9050919050565b60006020820190508181036000830152613fac8161398b565b9050919050565b60006020820190508181036000830152613fcc816139ae565b9050919050565b60006020820190508181036000830152613fec816139f4565b9050919050565b6000602082019050818103600083015261400c81613a17565b9050919050565b6000602082019050818103600083015261402c81613a3a565b9050919050565b6000602082019050818103600083015261404c81613a5d565b9050919050565b6000602082019050818103600083015261406c81613a80565b9050919050565b6000602082019050818103600083015261408c81613aa3565b9050919050565b600060208201905081810360008301526140ac81613ac6565b9050919050565b600060208201905081810360008301526140cc81613ae9565b9050919050565b600060208201905081810360008301526140ec81613b0c565b9050919050565b6000602082019050818103600083015261410c81613b2f565b9050919050565b6000602082019050818103600083015261412c81613b52565b9050919050565b6000602082019050818103600083015261414c81613b75565b9050919050565b6000602082019050818103600083015261416c81613b98565b9050919050565b6000602082019050818103600083015261418c81613bbb565b9050919050565b600060208201905081810360008301526141ac81613bde565b9050919050565b600060208201905081810360008301526141cc81613c01565b9050919050565b600060208201905081810360008301526141ec81613c24565b9050919050565b6000602082019050818103600083015261420c81613c47565b9050919050565b6000602082019050818103600083015261422c81613c6a565b9050919050565b6000602082019050818103600083015261424c81613c8d565b9050919050565b60006020820190506142686000830184613cb0565b92915050565b6000614278614289565b90506142848282614530565b919050565b6000604051905090565b600067ffffffffffffffff8211156142ae576142ad614672565b5b6142b7826146a1565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614327826144a5565b9150614332836144a5565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614367576143666145e5565b5b828201905092915050565b600061437d826144a5565b9150614388836144a5565b92508261439857614397614614565b5b828204905092915050565b60006143ae826144a5565b91506143b9836144a5565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143f2576143f16145e5565b5b828202905092915050565b6000614408826144a5565b9150614413836144a5565b925082821015614426576144256145e5565b5b828203905092915050565b600061443c82614485565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b838110156144e95780820151818401526020810190506144ce565b838111156144f8576000848401525b50505050565b6000600282049050600182168061451657607f821691505b6020821081141561452a57614529614643565b5b50919050565b614539826146a1565b810181811067ffffffffffffffff8211171561455857614557614672565b5b80604052505050565b600061456c826144a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561459f5761459e6145e5565b5b600182019050919050565b6000819050919050565b60006145bf826144a5565b91506145ca836144a5565b9250826145da576145d9614614565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f53455454494e475f5a45524f5f41444452455353000000000000000000000000600082015250565b7f4e6f7420656c696769626c6520666f722077686974656c6973742e0000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f45746865722076616c75652073656e74206973206e6f7420657175616c20746860008201527f652070726963652e000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f45786365656473204d41585f4c494f4e2e000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f544f4b454e5f4e4f545f45584953545300000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5468697320737461676520697320736f6c64206f757421000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f45786365656473206d61782077686974656c697374206e756d6265722e000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f4e4f545f494e5f57484954454c4953545f54494d450000000000000000000000600082015250565b7f57484954454c4953545f4e4f545f414354495645000000000000000000000000600082015250565b614d7481614431565b8114614d7f57600080fd5b50565b614d8b81614443565b8114614d9657600080fd5b50565b614da281614459565b8114614dad57600080fd5b50565b614db9816144a5565b8114614dc457600080fd5b5056fea2646970667358221220d12e5a50562cf7616f99e96345c43f2afa1af640a1aa4a60864baf043046166d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2845,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2847,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2850,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2854,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2860,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3619,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "MAX_LION",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3622,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "STAGE_LIMIT",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3625,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "PRICE",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3628,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "numWhitelistSale",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3631,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "numGiveaway",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3634,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "totalSupply",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3637,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "hasWhitelistSaleStarted",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3640,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 3643,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "treasury",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 3647,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "hasMinted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3650,
        "contract": "contracts/LionDAO.sol:LionDAO",
        "label": "whitelistSaleTimestamp",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}